#!/bin/bash
################################
#
# Add Wordpress Box to Vagrant
#
################################

BOLD=$(tput bold)
GREEN=$(tput setaf 2)
WHITE=$(tput setaf 7)
BLUE=$(tput setaf 6)
RESET=$(tput sgr0)


logo()
{
  echo "${BLUE}
                    wwwwwwwwwwwwwwwwwwwwww
                wwwwwwwww            wwwwwwwww
              wwwwww   wwwwwwwwwwwwwwwwww   wwwwww
            wwww   wwwwwwwwwwwwwwwwwwwwwwwwww   wwww
          wwww  wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww  wwww
        wwww  wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww   wwww
      wwww  wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww        wwww
    www  wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww           www
    www          wwwwwwwwww         wwwwwwwww            www
  www  w       wwwwwwwwwwww       wwwwwwwwwww        ww  www
  ww  www       wwwwwwwwwwww       wwwwwwwwwwww      www  www
  ww  wwww       wwwwwwwwwwwww       wwwwwwwwwwww     www  www
  ww  wwwww       wwwwwwwwwwww       wwwwwwwwwwww     wwww  ww
  ww  wwwwww       wwwwwwwwwwww       wwwwwwwwwwww   wwwww  ww
  ww  wwwwwww      wwwwwwwwwwwww       wwwwwwwwwww  wwwwww  ww
  ww  wwwwwww       wwwwwwwwwww        wwwwwwwwwww  wwwwww  ww
  ww  wwwwwwww       wwwwwwwww  w       wwwwwwwww   wwwwww  ww
  ww  wwwwwwwww      wwwwwwwww www       wwwwwwww  wwwwwww  ww
  ww  wwwwwwwww       wwwwwww wwwww      wwwwwwww  wwwwwww  ww
  ww  wwwwwwwwww       wwwww  wwwwww      wwwwww  wwwwwwww  ww
  www  wwwwwwwwww      wwwww wwwwwww       wwwww wwwwwwww  www
    www  wwwwwwwww      www wwwwwwwww      www  wwwwwww  www
    www  wwwwwwwwww      w wwwwwwwwwww      ww wwwwwww  www
      wwww  wwwwwww        wwwwwwwwwww        wwwwww  wwww
        wwww  wwwwww      wwwwwwwwwwwww      wwwww  wwww
          wwww  wwwww    wwwwwwwwwwwwwww     www  wwww
            wwww   ww    wwwwwwwwwwwwwwww       wwww
              wwwwww    wwwwwwwwwwwwwwwww   wwwwww
                wwwwwwwww            wwwwwwwww
                    wwwwwwwwwwwwwwwwwwwwww
  ${RESET}"
}

wp_banner()
{
  clear
  logo
  echo "${BOLD}${GREEN}
                Development WordPress box builder
  ${RESET}"
}

wp_banner # Show banner

# Get this scripts path for relative script pathing
PARENT_PATH=$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )

# VM name
# If no name given, give default name to folder
# Add time + date as unique identifier
defname=false
while true; do
read -p "Give the machine a name! (if empty, use autogenerated name) " vmname
echo ""
  if [ -z "${vmname}" ]; then
    # If empty, use default name
    today=$(date +"%H%M%S")
    name="new-box-${today}"
    defname=true
    break;
  elif ! [[ "$vmname" =~ [^a-zA-Z0-9_-] ]]; then
    name=$vmname
    break;
  else
    echo "The name can only contain aplhabetics and dashes. Please give a different name."
  fi
done

wp_banner # Show banner

# folder name
folder=""
while true; do
read -p "What folder should the Wordpress be installed to? (if empty install to root) " foldername
echo ""
  if [ -z "${foldername}" ]; then  # Test if empty
    break;
  elif ! [[ "$foldername" =~ [^a-zA-Z0-9_-] ]]; then
    folder=$foldername
    break;
  else
    echo "The folder name can only contain aplhabetics and dashes. Please give a different name."
  fi
done

wp_banner # Show banner

# Which php version to install
wpvers="latest"
while true; do
read -n1 -p "Use specific Wordpress version? [y/N] (default: $wpvers) " yn
echo ""
  case $yn in
    [Yy]* )
      while true; do
        echo ""
        echo "Expects version to be a two or three digit float, eg. 5.3 or 5.3.3"
        read -n5 -p "Give the Wordpress version number (use default [N]): " wpversin
        echo ""

        if [[ $wpversin =~ ^[0-9]*[.][0-9]*[.][0-9]*$ ]]
        then
          wpvers=$wpversin
          break;
        elif test $wpversin == "N"; then
          break;
        else
            echo "$wpversin is not a valid version number."
        fi
      done
      break;;
    [Nn]* )
      break;;
    * ) echo "Please answer y or n.";;
  esac
done

wp_banner # Show banner

# Which php version to install
server="nginx"
while true; do
read -n1 -p "Should this box use apache instead of nginx? [y/N] " yn
echo ""
  case $yn in
    [Yy]* )
      server="apache"
      break;;
    [Nn]* )
      break;;
    * ) echo "Please answer y or n.";;
  esac
done

wp_banner # Show banner

# Which php version to install
php=7.4
while true; do
read -n1 -p "Use specific PHP version? [y/N] (default: $php) " yn
echo ""
  case $yn in
    [Yy]* )
      while true; do
        echo ""
        echo "Expects version to be a two digit float, eg. 7.4"
        read -n3 -p "Give the PHP version number (use default [N]): " vers
        echo ""

        if [[ $vers =~ ^[0-9]*[.][0-9]*$ ]]
        then
          php=$vers
          break;
        elif test $vers == "N"; then
          break;
        else
            echo "$vers is not a valid version number."
        fi
    done
      break;;
    [Nn]* )
      break;;
    * ) echo "Please answer y or n.";;
  esac
done

wp_banner # Show banner

# Which database to install
db="mariadb"
while true; do
read -n1 -p "Should this box use MySQL isntead of MariaDB? [y/N] " yn
echo ""
  case $yn in
    [Yy]* )
      db="mysql"
      break;;
    [Nn]* )
      break;;
    * ) echo "Please answer y or n.";;
  esac
done

wp_banner # Show banner

# Check if user wants to empty out the wp install
purge=false
while true; do
read -n1 -p "Do you want to purge WordPress? [y/N] " yn
echo ""
  case $yn in
    [Yy]* )
      purge=true
      break;;
    [Nn]* )
      break;;
    * ) echo "Please answer y or n.";;
  esac
done

wp_banner # Show banner

# Check if user wants install migration plugin
migrate=false
while true; do
read -n1 -p "Do you want to install migration plugin? [y/N] " yn
echo ""
  case $yn in
    [Yy]* )
      migrate=true
      break;;
    [Nn]* )
      break;;
    * ) echo "Please answer y or n.";;
  esac
done

wp_banner # Show banner

# ---- DO THE THINGS ----

# Set database name based on install folder
dbname="db_$folder"

# Check that info is correct
while true; do
read -n1 -p "
Is this correct?
Name:        $name
Folder:      $folder
WP version:  $wpvers
Server:      $server
DB name:     $dbname
PHP version: $php
Database:    $db
Purge WP:    $purge
Migration:   $migrate
Proceed to install? [y/N]
" yn
echo ""
  case $yn in
    [Yy]* ) break;;
    [Nn]* )
      wp_banner # Show banner
      echo "Building was aborted!"
      sleep 1
      clear
      exit;;
    * ) echo "Please answer y or n.";;
  esac
done

wp_banner # Show banner
echo "Building the box, please wait!"

# Make new box's folder & copy installation files to it
mkdir "${name}"
cp "${PARENT_PATH}/Vagrantfile" $name

# We add the path to the tool folder to the vagrantfile
# So we don't have to copy provisions over anymore
# cp -r "${PARENT_PATH}/provisions" $name

cd $name

# Set the VM name
if test $defname = true; then
  # If using default, generate VM name
  sed -i 's/vb.name.*/# &/' ./Vagrantfile
else
  # Else use name as the VM name aswell
  sed -i "s/vb.name.*/vb.name = \"$name\"/" ./Vagrantfile
fi

# Get and add machine Ethernet or WLAN mac address to Vagrants bridged connection
ethernetMAC=$( ipconfig -all | sed -ne '/Ethernet adapter Ethernet:/,$ p' | sed -n '/Physical Address.*/p'| head -1 | sed 's/Physi.*: //' | tr -d ' -' )
wlanMAC=$( ipconfig -all | sed -ne '/Wireless LAN adapter WLAN:/,$ p'| sed -n '/Physical Address.*/p'| head -1 | sed 's/Physi.*: //' | tr -d ' -' )

# If MACs are not empty, set mac
# Use ethernet first as it is most likely used
if ! [ -z "${ethernetMAC}" ]; then
  mac=$ethernetMAC
elif ! [ -z "${wlanMAC}" ]; then
  mac=$wlanMAC
else
  mac=false
fi

if test mac == false; then
  # If no mac was found, don't set anything, as this breaks Vagrant
  sed -i "s/, :mac.*//" ./Vagrantfile
else
  sed -i "s/:mac.*/:mac => \"$mac\"/" ./Vagrantfile
fi

# Set server
if test $server != "nginx"; then
  sed -i "s/\"SERVER\" =>.*/\"SERVER\" => \"$server\",/" ./Vagrantfile
fi

# Set PHP Version
if test $php != "7.4"; then
  sed -i "s/\"PHPV\" =>.*/\"PHPV\" => \"$php\",/" ./Vagrantfile
fi

# Set database
if test $db != "mariadb" ; then
  sed -i "s/\"TYPE\" =>.*/\"TYPE\" => \"$db\",/" ./Vagrantfile
fi

# Set ENV vars for Wordpress
sed -i "s/\"NAME\" =>.*/\"NAME\" => \"$folder\",/" ./Vagrantfile
# sed -i "s/\"LOCALE\" =>.*/\"LOCALE\" => \"$locale\",/" ./Vagrantfile
sed -i "s/\"VERSION\" =>.*/\"VERSION\" => \"$wpvers\",/" ./Vagrantfile
sed -i "s/\"DB\" =>.*/\"DB\" => \"$dbname\",/" ./Vagrantfile
sed -i "s/\"PURGE\" =>.*/\"PURGE\" => $purge,/" ./Vagrantfile
sed -i "s/\"MIGRATE\" =>.*/\"MIGRATE\" => $migrate,/" ./Vagrantfile

# Set the path of the provision files
provpath=$( echo "$PARENT_PATH/provisions/" | sed -r 's/^.{2}//' )
sed -i "s@provision =.*@provision = \"$provpath\"@" ./Vagrantfile

wp_banner # Show banner

echo "Finished making the box ${name}"
echo "To install it, use cd ${name} and vagrant up!"